ISBN;TITLE;DESCRIPTION;LANGUAGE;PUBLISHED_AT;PUBLISHER_ID;PAGES;STATE;IMAGE_URI
978-0134757599;Refactoring: Improving the Design of Existing Code (2nd Edition) (Addison-Wesley Signature Series (Fowler));<p>The guide to how to transform code with safe and rapid process, vital to keeping it cheap and easy to modify for future needs.</p>;en;2018-11-30;(SELECT ID FROM PUBLISHERS WHERE NAME = 'Addison-Wesley Professional');448;AVAILABLE;/assets/books/covers/refactoring-martin-fowler.png
978-0321127426;Patterns of Enterprise Application Architecture 1st Edition;<p>The practice of enterprise application development has benefited from the emergence of many new enabling technologies. Multi-tiered object-oriented platforms, such as Java and .NET, have become commonplace. These new tools and technologies are capable of building powerful applications, but they are not easily implemented. Common failures in enterprise applications often occur because their developers do not understand the architectural lessons that experienced object developers have learned. </p><p><strong>Patterns of Enterprise Application Architecture</strong> is written in direct response to the stiff challenges that face enterprise application developers. The author, noted object-oriented designer Martin Fowler, noticed that despite changes in technology--from Smalltalk to CORBA to Java to .NET--the same basic design ideas can be adapted and applied to solve common problems. With the help of an expert group of contributors, Martin distills over forty recurring solutions into patterns. The result is an indispensable handbook of solutions that are applicable to any enterprise application platform.</p><p>This book is actually two books in one. The first section is a short tutorial on developing enterprise applications, which you can read from start to finish to understand the scope of the book&aposs lessons. The next section, the bulk of the book, is a detailed reference to the patterns themselves. Each pattern provides usage and implementation information, as well as detailed code examples in Java or C#. The entire book is also richly illustrated with UML diagrams to further explain the concepts.</p><p>Armed with this book, you will have the knowledge necessary to make important architectural decisions about building an enterprise application and the proven patterns for use when building them.</p><p>The topics covered include:<ul><li>Dividing an enterprise application into layers</li><li>The major approaches to organizing business logic</li><li>An in-depth treatment of mapping between objects and relational databases</li><li>Using Model-View-Controller to organize a Web presentation</li><li>Handling concurrency for data that spans multiple transactions</li><li>Designing distributed object interfaces</li></ul></p>;en;2002-11-05;(SELECT ID FROM PUBLISHERS WHERE NAME = 'Addison-Wesley Professional');560;AVAILABLE;/assets/books/covers/patterns-of-enterprise-application-architecture.png
978-0321125217;Domain-Driven Design: Tackling Complexity in the Heart of Software 1st Edition;'<style>.a-text-italic{font-style:italic;} .a-text-bold{font-weight:700;}</style><p><span>“Eric Evans has written a fantastic book on how you can make the design of your software match your mental model of the problem domain you are addressing.</span></p><p><span>“His book is very compatible with XP. It is not about drawing pictures of a domain; it is about how you think of it, the language you use to talk about it, and how you organize your software to reflect your improving understanding of it. Eric thinks that learning about your problem domain is as likely to happen at the end of your project as at the beginning, and so refactoring is a big part of his technique.</span></p><p><span>“The book is a fun read. Eric has lots of interesting stories, and he has a way with words. I see this book as essential reading for software developers―it is a future classic.”</span></p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;―</span><span class="a-text-bold">Ralph Johnson</span><span>, author of</span><span class="a-text-italic">Design Patterns</span><p><span>“If you don’t think you are getting value from your investment in object-oriented programming, this book will tell you what you’ve forgotten to do.</span></p><p><span>“Eric Evans convincingly argues for the importance of domain modeling as the central focus of development and provides a solid framework and set of techniques for accomplishing it. This is timeless wisdom, and will hold up long after the methodologies du jour have gone out of fashion.”</span></p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;―</span><span class="a-text-bold">Dave Collins</span><span>, author of</span><span class="a-text-italic">Designing Object-Oriented User Interfaces</span><p><span>“Eric weaves real-world experience modeling―and building―business applications into a practical, useful book. Written from the perspective of a trusted practitioner, Eric’s descriptions of ubiquitous language, the benefits of sharing models with users, object life-cycle management, logical and physical application structuring, and the process and results of deep refactoring are major contributions to our field.”</span></p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;―</span><span class="a-text-bold">Luke Hohmann</span><span>, author of</span><span class="a-text-italic">Beyond Software Architecture</span><p><span class="a-text-italic">"This book belongs on the shelf of every thoughtful software developer."</span></p><p><span>--Kent Beck</span></p><p><span class="a-text-italic">"What Eric has managed to capture is a part of the design process that experienced object designers have always used, but that we have been singularly unsuccessful as a group in conveying to the rest of the industry. We&apos;ve given away bits and pieces of this knowledge...but we&apos;ve never organized and systematized the principles of building domain logic. This book is important."</span></p><p><span>--Kyle Brown, author of</span><span class="a-text-italic">Enterprise Java™ Programming with IBM</span><span class="a-text-italic"><sup>®</sup></span><span class="a-text-italic">WebSphere</span><span class="a-text-italic"><sup>®</sup></span></p><p><span>The software development community widely acknowledges that domain modeling is central to software design. Through domain models, software developers are able to express rich functionality and translate it into a software implementation that truly serves the needs of its users. But despite its obvious importance, there are few practical resources that explain how to incorporate effective domain modeling into the software development process.</span></p><p><span class="a-text-bold a-text-italic">Domain-Driven Design</span><span>fills that need. This is not a book about specific technologies. It offers readers a systematic approach to domain-driven design, presenting an extensive set of design best practices, experience-based techniques, and fundamental principles that facilitate the development of software projects facing complex domains. Intertwining design and development practice, this book incorporates numerous examples based on actual projects to illustrate the application of domain-driven design to real-world software development.</span></p><p><span>Readers learn how to use a domain model to make a complex development effort more focused and dynamic. A core of best practices and standard patterns provides a common language for the development team. A shift in emphasis--refactoring not just the code but the model underlying the code--in combination with the frequent iterations of Agile development leads to deeper insight into domains and enhanced communication between domain expert and programmer.</span><span class="a-text-bold a-text-italic">Domain-Driven Design</span><span>then builds on this foundation, and addresses modeling and design for complex systems and larger organizations.Specific topics covered include:</span></p><ul><li><span><span>Getting all team members to speak the same language</span></span></li><li><span><span>Connecting model and implementation more deeply</span></span></li><li><span><span>Sharpening key distinctions in a model</span></span></li><li><span><span>Managing the lifecycle of a domain object</span></span></li><li><span><span>Writing domain code that is safe to combine in elaborate ways</span></span></li><li><span><span>Making complex code obvious and predictable</span></span></li><li><span><span>Formulating a domain vision statement</span></span></li><li><span><span>Distilling the core of a complex domain</span></span></li><li><span><span>Digging out implicit concepts needed in the model</span></span></li><li><span><span>Applying analysis patterns</span></span></li><li><span><span>Relating design patterns to the model</span></span></li><li><span><span>Maintaining model integrity in a large system</span></span></li><li><span><span>Dealing with coexisting models on the same project</span></span></li><li><span><span>Organizing systems with large-scale structures</span></span></li><li><span><span>Recognizing and responding to modeling breakthroughs</span></span></li></ul><p><span>With this book in hand, object-oriented developers, system analysts, and designers will have the guidance they need to organize and focus their work, create rich and useful domain models, and leverage those models into quality, long-lasting software implementations.</span></p><span><br><br></span>';en;2003-08-20;(SELECT ID FROM PUBLISHERS WHERE NAME = 'Addison-Wesley Professional');560;AVAILABLE;/assets/books/covers/ddd-tackling-complexity-in-the-heart-of-software.png
978-1617294549;Microservices Patterns: With examples in Java 1st Edition;<p><ul><li>Understanding the microservices architecture</li><li>When and when not to use the microservices architecture</li><li>How to develop a microservices architecture for an application</li><li>Transaction management and querying in a microservices architecture</li><li>Effective testing strategies for microservices</li><li>How to refactor a monolithic application into services</li></ul></p>;en;2018-11-19;(SELECT ID FROM PUBLISHERS WHERE NAME = 'Manning');520;AVAILABLE;/assets/books/covers/microservices-patterns-with-examples-in-java-chris-richardson.png
978-0997148008;Programming in Scala Fifth Edition;<p>This book is the authoritative tutorial on the Scala programming language, co-written by the language's designer, Martin Odersky. This fifth edition is a major rewrite of the entire book, adding new material to cover the many changes in Scala 3.0. In fact we have added so much new material that we split the book into two volumes. This volume, <em>Programming in Scala</em>, is a tutorial of Scala and functional programming. Thesecond volume, <em>Advanced Programming in Scala</em>, which will be released as a PrePrint™ soon, is a deep dive into advanced aspects of Scala 3. The changes and new features covered in this book include:</p><ul><li>Quiet (indentation-sensitive) control syntax</li><li>Intersection and union types</li><li>Enums and Algebraic Data Types (ADTs)</li><li>Context parameters and given instances</li><li>Trait parameters and transparent traits</li><li>Universal apply methods</li><li>Extension methods</li><li>Multiversal equality</li><li>Export clauses</li><li>main functions</li></ul>;en;2021-06-15;(SELECT ID FROM PUBLISHERS WHERE NAME = 'Artima Press');668;AVAILABLE;/assets/books/covers/programming-in-scala-fifth-edition-martin-odersky.png
978-1617294044;Elm in Action 1st Edition;<p>Elm is more than just a cutting-edge programming language, it’s a chance to upgrade the way you think about building web applications. Once you get comfortable with Elm’s refreshingly different approach to application development, you’ll be working with a clean syntax, dependable libraries, and a delightful compiler that essentially eliminates runtime exceptions. Elm compiles to JavaScript, so your code runs in any browser, and Elm’s best-in-class rendering speed will knock your socks off. Let’s get started!</p>;en;2020-03-10;(SELECT ID FROM PUBLISHERS WHERE NAME = 'Manning');344;AVAILABLE;/assets/books/covers/elm-in-action-richard-feldman.png
978-0134685991;Effective Java 3rd Edition;<p>Since this Jolt-award winning classic was last updated in 2008, the Java programming environment has changed dramatically. Java 7 and Java 8 introduced new features and functions including, forEach() method in Iterable interface, default and static methods in Interfaces, Functional Interfaces and Lambda Expressions, Java Stream API for Bulk Data Operations on Collections, Java Time API, Collection API improvements, Concurrency API improvements, and Java IO improvements.</p><p>In this new edition of <strong>Effective Java</strong>, Bloch explores new design patterns and language idioms that have been introduced since the second edition was released in 2008 shortly after Java SE6, including Lambda, streams, generics and collections, as well as selected Java 9 features.</p><p>As in previous editions, each chapter consists of several “items” presented in the form of a short, standalone essay that provides specific advice, insight into Java platform subtleties, and updated code examples. The comprehensive descriptions and explanations for each item illuminate what to do, what not to do, and why.</p><ul><li>Updated techniques and best practices on classic topics, including objects, classes, libraries, methods, and serialization</li><li>How to avoid the traps and pitfalls of commonly misunderstood subtleties of the language</li><li>Focus on the language and its most fundamental libraries: java.lang, java.util, and, to a lesser extent, java.util.concurrent and java.io</li></ul>;en;2017-12-27;(SELECT ID FROM PUBLISHERS WHERE NAME = 'Addison-Wesley Professional');416;AVAILABLE;/assets/books/covers/effective-java-3rd-edition-joshua-bloch.png
978-1492047841;Monolith to Microservices: Evolutionary Patterns to Transform Your Monolith 1st Edition;<p>How do you detangle a monolithic system and migrate it to a microservice architecture? How do you do it while maintaining business-as-usual? As a companion to Sam Newman’s extremely popular <em>Building Microservices</em>, this new book details a proven method for transitioning an existing monolithic system to a microservice architecture.</p><p>With many illustrative examples, insightful migration patterns, and a bevy of practical advice to transition your monolith enterprise into a microservice operation, this practical guide covers multiple scenarios and strategies for a successful migration, from initial planning all the way through application and database decomposition. You’ll learn several tried and tested patterns and techniques that you can use as you migrate your existing architecture.</p><ul><li>Ideal for organizations looking to transition to microservices, rather than rebuild</li><li>Helps companies determine whether to migrate, when to migrate, and where to begin</li><li>Addresses communication, integration, and the migration of legacy systems</li><li>Discusses multiple migration patterns and where they apply</li><li>Provides database migration examples, along with synchronization strategies</li><li>Explores application decomposition, including several architectural refactoring patterns</li><li>Delves into details of database decomposition, including the impact of breaking referential and transactional integrity, new failure modes, and more</li></ul>;en;2019-12-10;;272;AVAILABLE;/assets/books/covers/monolith-to-microservices-evolutionary-patterns-to-transform-your-monolith-1st-edition-sam-newman.png
978-1492034025;Building Microservices: Designing Fine-Grained Systems 2nd Edition;<p>As organizations shift from monolithic applications to smaller, self-contained microservices, distributed systems have become more fine-grained. But developing these new systems brings its own host of problems. This expanded second edition takes a holistic view of topics that you need to consider when building, managing, and scaling microservices architectures.</p><p>Through clear examples and practical advice, author Sam Newman gives everyone from architects and developers to testers and IT operators a firm grounding in the concepts. You'll dive into the latest solutions for modeling, integrating, testing, deploying, and monitoring your own autonomous services. Real-world cases reveal how organizations today manage to get the most out of these architectures.</p><p>Microservices technologies continue to move quickly. This book brings you up to speed.</p><ul><li>Get new information on user interfaces, container orchestration, and serverless</li><li>Align system design with your organization's goals</li><li>Explore options for integrating a service with your system</li><li>Understand how to independently deploy microservices</li><li>Examine the complexities of testing and monitoring distributed services</li><li>Manage security with expanded content around user-to-service and service-to-service models</li></ul>;en;2021-09-28;;612;AVAILABLE;/assets/books/covers/building-microservices-designing-fine-grained-systems-2nd-edition-sam-newman.png
978-0137314911;Modern Software Engineering: Doing What Works to Build Better Software Faster 1st Edition;"'<p><strong>Improve Your Creativity, Effectiveness, and Ultimately, Your Code</strong></p><p></p><p>In <strong>Modern Software Engineering<strong>, continuous delivery pioneer David Farley helps software professionals think about their work more effectively, manage it more successfully, and genuinely improve the quality of their applications, their lives, and the lives of their colleagues.</strong></strong></p><p>Writing for programmers, managers, and technical leads at all levels of experience, Farley illuminates durable principles at the heart of effective software development. He distills the discipline into two core exercises: learning and exploration and managing complexity. For each, he defines principles that can help you improve everything from your mindset to the quality of your code, and describes approaches proven to promote success.</p><p>Farley's ideas and techniques cohere into a unified, scientific, and foundational approach to solving practical software development problems within realistic economic constraints. This general, durable, and pervasive approach to software engineering can help you solve problems you haven't encountered yet, using today's technologies and tomorrow's. It offers you deeper insight into what you do every day, helping you create better software, faster, with more pleasure and personal fulfillment.</p><ul><li>Clarify what you're trying to accomplish</li><li>Choose your tools based on sensible criteria</li><li>Organize work and systems to facilitate continuing incremental progress</li><li>Evaluate your progress toward thriving systems, not just more ""legacy code""</li><li>Gain more value from experimentation and empiricism</li><li>Stay in control as systems grow more complex</li><li>Achieve rigor without too much rigidity</li><li>Learn from history and experience</li><li>Distinguish ""good"" new software development ideas from ""bad"" ones</li></ul>'";en;2021-12-10;(SELECT ID FROM PUBLISHERS WHERE NAME = 'Addison-Wesley Professional');256;AVAILABLE;/assets/books/covers/modern-software-engineering-doing-what-works-to-build-better-software-faster-1st-edition-david-farley.png